#!/usr/bin/env python3
import sys
import requests
from findCve import get_cves_and_fix_versions
from fileParser import handle_npm_dependencies, handle_python_dependencies


FILE_PATH = 3
FILE_NAME = 2
TYPE_OF_FILE = 1
TYPE_TO_PACKAGE_MANAGER = {"-r" : "pip", "-p" : "npm"}


def dependencies_analysis(path : str, type : str):
    """
    this function will analyze each dependency, receive its open CVEs and the closest fix version if available
    :param path: full path to the dependencies file
    :type path: str
    :param type: the type of the dependencies file, either -p for npm or -r for pip
    :type type: str
    """
    if type not in TYPE_TO_PACKAGE_MANAGER.keys():
        print(f"the program only excepts {list(TYPE_TO_PACKAGE_MANAGER.keys())} as a file type.")
        sys.exit(1)
    try:
        with open(path, 'r') as file:
            dependencies = handle_python_dependencies(file) if type == '-r' else handle_npm_dependencies(file)

        package_manager = TYPE_TO_PACKAGE_MANAGER[type]
        full_dependencies_data = []
        with requests.Session() as session:
            for package_name, package_version in dependencies.items():
                full_dependencies_data.append([package_name, package_version, get_cves_and_fix_versions(package_manager, package_name, package_version, session)])
        
        print_table(full_dependencies_data)
    except Exception as e:
        print(e)


def print_table(versions_data : list):
    """
    this function will print each version data
    :param versions_data: list of the shape [package_name, current_version, {cves : fix_versions}]
    :type versions_data: list
    """
    print("Dependency Name | Current Dependency Version | CVE ID | Fix version")
    for package_name, current_version, cves_and_fix_version in versions_data:
        for cve_id, fix_version in cves_and_fix_version.items():
            print(f"{package_name}    |    {current_version}    |    {cve_id}    |    {fix_version}")


def main():
    if len(sys.argv) != 4:
        print("only excepts arguments list in the following stracture:")
        print("cve-hunter -r requirements.txt (path to file)")
        print("cve-hunter -p package.json (path to file)")
    else:
        dependencies_analysis(f"{sys.argv[FILE_PATH]}/{sys.argv[FILE_NAME]}", sys.argv[TYPE_OF_FILE])

if __name__ == '__main__':
    main()