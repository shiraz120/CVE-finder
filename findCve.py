import requests
import re
import pkg_resources
from bs4 import BeautifulSoup

BASE_URL = 'https://security.snyk.io/'

def find_closest_bigger_fix_version(version_to_fix : str, versions : list) -> str:
    """
    used for finding the closest fix version from a list of versions for a given version, if it cant find a bigger fix version even if
    there is a smaller fix version it will not return it.
    :param version_to_fix: the version to find a bigger fix version for
    :type version_to_fix: str
    :param versions: the list of versions to sort and find an available fix version from.
    :type versions: list of strings
    :return: available fix version or a string that says that there is no available newer fix version
    :rtype: string
    """
    versions.sort(key=lambda version: pkg_resources.parse_version(version)) # first sorting the versions to be able to extract the closest new fix version
    for version in versions:
        if pkg_resources.parse_version(version_to_fix) < pkg_resources.parse_version(version):
            return version
    return "no available older fix version"


def get_cves_and_fix_versions(packageManager : str, package_name: str, package_version : str, session : requests.sessions.Session = requests.Session()) -> dict:
    """
    this function can be used to extract the closest fix version for the queried package version open CVEs, it will use
    the snyk open database to extract the snyk vulnerabilities IDs and then use the open database to extract information about those snyk vulnerabilities
    using their snyk IDs. then it will extract the CVE id and the closest fix version for that CVE.
    :param packageManager: under which package manager that package can be found
    :type packageManager: str
    :param package_name: the package name
    :type package_name: str
    :param package_version: the package version
    :type package_version: str
    :param session: because the same url is being requested the function allows to pass an existing session insead of openning a new TCP connection with the SNYK server
    :type session: requests.sessions.Session
    :return: dictionary that maps between the cve and the corresponding fix version
    :rtype: dict
    """

    url = f"{BASE_URL}/package/{packageManager}/{package_name}/{package_version}"
    response = session.get(url)
    cve_to_fix_versions = {}

    if response.ok:  
        try:
            data_as_html = BeautifulSoup(response.content, 'html.parser')
            vulnerabilities = data_as_html.find(class_="vue--table__tbody").find_all(class_="vue--table__row")
        except:
            vulnerabilities = []

        for vuln in vulnerabilities:
            try:
                snyk_vuln = vuln.find(class_="vue--anchor")["href"]
                response = session.get(f'{BASE_URL}/{snyk_vuln}')

                if response.ok:   
                    data_as_html = BeautifulSoup(response.content, 'html.parser')
                    cve = data_as_html.find(class_="cve").find(class_="vue--anchor")["id"]
                    fix_versions = re.findall(r"\d\S*",str(data_as_html.find(class_="vue--markdown-to-html markdown-description")).split("</code>")[1].replace(",", ""))
                    cve_to_fix_versions[cve] = find_closest_bigger_fix_version(package_version, fix_versions)
            except:
                continue

    return cve_to_fix_versions